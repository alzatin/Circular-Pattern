{
    "atomType": "Molecule",
    "name": "Circular Pattern",
    "x": 0,
    "y": 0,
    "uniqueID": 397911,
    "ioValues": [
        {
            "name": "shape",
            "ioValue": 10
        },
        {
            "name": "count",
            "ioValue": 6
        },
        {
            "name": "radius",
            "ioValue": 13
        }
    ],
    "topLevel": true,
    "allAtoms": [
        {
            "atomType": "Input",
            "name": "shape",
            "x": 0.013333333333333334,
            "y": 0.34169278996865204,
            "uniqueID": 540620,
            "ioValues": []
        },
        {
            "atomType": "Input",
            "name": "count",
            "x": 0.013333333333333334,
            "y": 0.47648902821316613,
            "uniqueID": 744449,
            "ioValues": []
        },
        {
            "atomType": "Code",
            "name": "Code",
            "x": 0.5311601150527324,
            "y": 0.39817629179331304,
            "uniqueID": 483499,
            "ioValues": [
                {
                    "name": "count",
                    "ioValue": 6
                },
                {
                    "name": "inputID",
                    "ioValue": 10
                },
                {
                    "name": "backUpShape",
                    "ioValue": 1721752212012
                },
                {
                    "name": "radius",
                    "ioValue": 13
                }
            ],
            "codeVersion": 1,
            "code": "// Circular Pattern\n//Inputs:[inputID, count, radius, backUpShape]\n\nconst bomAssembly = [];\n\nconst polarCopies = (shape, count, radius) => {\n  const copies = [];\n  const angle = 360 / count;\n\n  for (let i = 0; i < count; i++) {\n    copies.push(\n      actOnLeafs(shape, (leaf) => {\n        const base = leaf.geometry[0].clone().translate(0, radius);\n        return {\n          geometry: [base.clone().rotate(i * angle)],\n          tags: leaf.tags,\n          plane: leaf.plane,\n          color: leaf.color,\n          bom: leaf.bom,\n        };\n      })\n    );\n\n    if (shape.bom.length > 0) {\n      bomAssembly.push(...shape.bom);\n    }\n  }\n  let copyAssembly = copies;\n  return copyAssembly;\n};\n\nreturn started.then(() => {\n  if (inputID !== 10) {\n    library[targetID] = {\n      geometry: polarCopies(library[inputID], count, radius),\n      tags: [],\n      plane: library[inputID].plane,\n      color: library[inputID].color,\n      bom: bomAssembly,\n    };\n  } else {\n    //faulty input\n    library[targetID] = {\n      geometry: polarCopies(library[backUpShape], count, radius),\n      tags: [],\n      plane: library[backUpShape].plane,\n      color: library[backUpShape].color,\n      bom: bomAssembly,\n    };\n  }\n  return library[targetID];\n});\n"
        },
        {
            "atomType": "Input",
            "name": "radius",
            "x": 0.013333333333333334,
            "y": 0.7523510971786834,
            "uniqueID": 368635,
            "ioValues": []
        },
        {
            "atomType": "Readme",
            "name": "README",
            "x": 0.8011639185257031,
            "y": 0.7178683385579937,
            "uniqueID": 1715885965807,
            "ioValues": [],
            "readmeText": "Circular-Pattern\n\nTopics : maslowcreate, maslowcreate-project, maslowcreate-action\nGitHub Repo : https://github.com/alzatin/Circular-Pattern\n\n@input {geometry} Shape - Replicad Geometry\n@input {number} Count - Number of times geometry will be repeated\n@input {number} Radius- Radius of circle around which the pattern will be created\n\n - Might update it to include assemblies and sketches.\n\n",
            "global": true
        },
        {
            "atomType": "Output",
            "name": "Output",
            "x": 0.98,
            "y": 0.5,
            "uniqueID": 523099,
            "ioValues": [
                {
                    "name": "number or geometry",
                    "ioValue": 483499
                }
            ]
        },
        {
            "atomType": "Circle",
            "name": "Circle",
            "x": 0.22435282837967402,
            "y": 0.7689969604863222,
            "uniqueID": 1718566662498,
            "ioValues": [
                {
                    "name": "diameter",
                    "ioValue": 10
                }
            ]
        },
        {
            "atomType": "Join",
            "name": "Assembly",
            "x": 0.4448705656759348,
            "y": 0.7173252279635258,
            "uniqueID": 1721752212012,
            "ioValues": [
                {
                    "name": "3D shape 1",
                    "ioValue": 1718566662498
                }
            ],
            "unionType": "Assembly"
        }
    ],
    "allConnectors": [
        {
            "ap1Name": "number or geometry",
            "ap2Name": "inputID",
            "ap2Primary": false,
            "ap1ID": 540620,
            "ap2ID": 483499
        },
        {
            "ap1Name": "number or geometry",
            "ap2Name": "count",
            "ap2Primary": false,
            "ap1ID": 744449,
            "ap2ID": 483499
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "number or geometry",
            "ap2Primary": false,
            "ap1ID": 483499,
            "ap2ID": 523099
        },
        {
            "ap1Name": "number or geometry",
            "ap2Name": "radius",
            "ap2Primary": false,
            "ap1ID": 368635,
            "ap2ID": 483499
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "3D shape 1",
            "ap2Primary": false,
            "ap1ID": 1718566662498,
            "ap2ID": 1721752212012
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "backUpShape",
            "ap2Primary": false,
            "ap1ID": 1721752212012,
            "ap2ID": 483499
        }
    ],
    "fileTypeVersion": 1,
    "compiledBom": [],
    "filetypeVersion": 1
}