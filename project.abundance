{
    "atomType": "Molecule",
    "name": "Circular Pattern",
    "x": 0,
    "y": 0,
    "uniqueID": 397911,
    "ioValues": [
        {
            "name": "shape",
            "ioValue": 10
        },
        {
            "name": "count",
            "ioValue": 10
        },
        {
            "name": "radius",
            "ioValue": 10
        }
    ],
    "topLevel": true,
    "allAtoms": [
        {
            "atomType": "Input",
            "name": "shape",
            "x": 0.013333333333333334,
            "y": 0.34169278996865204,
            "uniqueID": 540620,
            "ioValues": []
        },
        {
            "atomType": "Input",
            "name": "count",
            "x": 0.013333333333333334,
            "y": 0.47648902821316613,
            "uniqueID": 744449,
            "ioValues": []
        },
        {
            "atomType": "Code",
            "name": "Code",
            "x": 0.5994180407371484,
            "y": 0.2852664576802508,
            "uniqueID": 483499,
            "ioValues": [
                {
                    "name": "geometry1",
                    "ioValue": 10
                },
                {
                    "name": "count",
                    "ioValue": 10
                },
                {
                    "name": "radius",
                    "ioValue": 10
                }
            ],
            "code": "//Inputs:[geometry1, count, radius]\n\n\n const polarCopies = (shape, count, radius) => {\n      const base = shape.clone().translate(0, radius);\n      const angle = 360 / count;\n      const copies = [];\n      for (let i = 0; i < count; i++) {\n        copies.push(base.clone().rotate(i * angle));\n      }\n      let fusedPattern = chainFuse(copies);\n      return fusedPattern;\n    };\n   \n  \nlet result = polarCopies(library[geometry1].geometry[0],count, radius)\nreturn [result]"
        },
        {
            "atomType": "Input",
            "name": "radius",
            "x": 0.013333333333333334,
            "y": 0.7523510971786834,
            "uniqueID": 368635,
            "ioValues": []
        },
        {
            "atomType": "Readme",
            "name": "README",
            "x": 0.8011639185257031,
            "y": 0.7178683385579937,
            "uniqueID": 1715885965807,
            "ioValues": [],
            "readmeText": "Circular-Pattern\n\nTopics : maslowcreate, maslowcreate-project, maslowcreate-action\nGitHub Repo : https://github.com/alzatin/Circular-Pattern\n\n@input {geometry} Shape - Replicad Geometry\n@input {number} Count - Number of times geometry will be repeated\n@input {number} Radius- Radius of circle around which the pattern will be created\n\n - Might update it to include assemblies and sketches.\n\n",
            "global": true
        },
        {
            "atomType": "Output",
            "name": "Output",
            "x": 0.98,
            "y": 0.5,
            "uniqueID": 523099,
            "ioValues": []
        },
        {
            "atomType": "Code",
            "name": "Code",
            "x": 0.6149369544131911,
            "y": 0.7053291536050157,
            "uniqueID": 1718566632418,
            "ioValues": [
                {
                    "name": "geometry1",
                    "ioValue": 1718566662498
                },
                {
                    "name": "count",
                    "ioValue": 10
                },
                {
                    "name": "radius",
                    "ioValue": 10
                }
            ],
            "code": "//Inputs:[geometry1, count, radius]\n\n\n const polarCopies = (shape, count, radius) => {\n      const base = shape.clone().translate(0, radius);\n      const angle = 360 / count;\n      const copies = [];\n      for (let i = 0; i < count; i++) {\n        copies.push(base.clone().rotate(i * angle));\n      }\n      let fusedPattern = chainFuse(copies);\n      return fusedPattern;\n    };\n   \n  \nlet result = polarCopies(library[geometry1].geometry[0],count, radius)\nreturn [result]"
        },
        {
            "atomType": "Circle",
            "name": "Circle",
            "x": 0.36081474296799226,
            "y": 0.6112852664576802,
            "uniqueID": 1718566662498,
            "ioValues": [
                {
                    "name": "diameter",
                    "ioValue": 10
                }
            ]
        }
    ],
    "allConnectors": [
        {
            "ap1Name": "number or geometry",
            "ap2Name": "geometry1",
            "ap2Primary": false,
            "ap1ID": 540620,
            "ap2ID": 483499
        },
        {
            "ap1Name": "number or geometry",
            "ap2Name": "count",
            "ap2Primary": false,
            "ap1ID": 744449,
            "ap2ID": 483499
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "number or geometry",
            "ap2Primary": false,
            "ap1ID": 483499,
            "ap2ID": 523099
        },
        {
            "ap1Name": "number or geometry",
            "ap2Name": "radius",
            "ap2Primary": false,
            "ap1ID": 368635,
            "ap2ID": 483499
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "geometry1",
            "ap2Primary": false,
            "ap1ID": 1718566662498,
            "ap2ID": 1718566632418
        }
    ],
    "unitsIndex": 0,
    "fileTypeVersion": 1,
    "filetypeVersion": 1
}